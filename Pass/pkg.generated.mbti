// Generated using `moon info`, DON'T EDIT IT
package "Kaida-Amethyst/MoonLLVM/Pass"

import(
  "Kaida-Amethyst/MoonLLVM/IR"
)

// Values

// Errors

// Types and methods
pub struct DCE {
}
fn DCE::description(Self) -> String // from trait `FunctionPass`
fn DCE::name(Self) -> String // from trait `FunctionPass`
fn DCE::run(Self, @IR.Function) -> Unit // from trait `FunctionPass`
impl FunctionPass for DCE

pub(all) enum OptLevel {
  Empty
  O0
}

pub struct PassManager {
  function_passes : Array[&FunctionPass]
}
fn PassManager::addPass(Self, &FunctionPass) -> Unit
fn PassManager::create(OptLevel) -> Self
fn PassManager::createEmpty() -> Self
fn PassManager::createO0() -> Self
fn PassManager::run(Self, @IR.Function) -> Unit

// Type aliases

// Traits
pub trait FunctionPass {
  name(Self) -> String
  description(Self) -> String
  run(Self, @IR.Function) -> Unit
}
fn &FunctionPass::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn &FunctionPass::op_equal(Self, Self) -> Bool // from trait `Eq`
impl Eq for &FunctionPass

