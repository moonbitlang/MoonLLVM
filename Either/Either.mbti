// Generated using `moon info`, DON'T EDIT IT
package "Kaida-Amethyst/MoonLLVM/Either"

// Values

// Types and methods
pub(all) enum Either[L, R] {
  Left(L)
  Right(R)
}
fn[L, R] Either::expect_left(Self[L, R], String) -> L
fn[L, R] Either::expect_right(Self[L, R], String) -> R
fn[L, R] Either::is_left(Self[L, R]) -> Bool
fn[L, R] Either::is_right(Self[L, R]) -> Bool
fn[L, R] Either::left(Self[L, R]) -> L?
fn[L, R] Either::left_unwrap(Self[L, R]) -> L
fn[L, R] Either::right(Self[L, R]) -> R?
fn[L, R] Either::right_unwrap(Self[L, R]) -> R
impl[L : Eq, R : Eq] Eq for Either[L, R]

// Type aliases

// Traits

